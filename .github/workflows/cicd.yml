name: LeetHub Setting

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_leethub.outputs.should_run }}
      package_name: ${{ steps.detect_package.outputs.PACKAGE_NAME }}
      commit_msg: ${{ steps.check_leethub.outputs.commit_msg }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # 이전 로그 2개까지 해서 변경점 비교(디폴트는 1)

      - name: Check if LeetHub Commit
        id: check_leethub
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B | tail -n 1)
          echo "Latest commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == Time:* && "$COMMIT_MSG" == *"- LeetHub" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "commit_msg=${COMMIT_MSG}" >> $GITHUB_OUTPUT
            echo "LeetHub 커밋 확인, 패키지 이사 작업 준비 ✅"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "commit_msg=" >> $GITHUB_OUTPUT
            echo "작업 없이 패스하면 됩니다 ❌"
          fi

      - name: Detect New Solve Package
        id: detect_package
        if: steps.check_leethub.outputs.should_run == 'true'
        run: |
          EXCLUDE_DIRS=("LeetCode" "백준" "프로그래머스" ".github")
          NEW_DIRS=$(git diff --name-only HEAD~1 HEAD | awk -F/ 'NF==2 {print $1}' | sort -u)

          for DIR in $NEW_DIRS; do
            SKIP=false
            for EX in "${EXCLUDE_DIRS[@]}"; do
              if [[ "$DIR" == "$EX" ]]; then
                SKIP=true
                break
              fi
            done

            if [[ "$SKIP" == false ]]; then
              echo "새로 추가된 문제풀이 패키지명: $DIR"
              echo "PACKAGE_NAME=$DIR" >> $GITHUB_OUTPUT
              break
            fi
          done

  move:
    needs: detect
    if: ${{ needs.detect.outputs.should_run == 'true' && needs.detect.outputs.package_name != '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Move Directory
        run: |
          PACKAGE_NAME="${{ needs.detect.outputs.PACKAGE_NAME }}"
          DEST_DIR="LeetCode/$PACKAGE_NAME"
          echo "옮겨야 할 패키지 확인: $PACKAGE_NAME"
      
          if [ -d "$DEST_DIR" ]; then
            echo "$DEST_DIR 디렉토리가 이미 존재, 내부 파일만 이동"
            # 내부 파일만 이동
            mv "$PACKAGE_NAME"/* "$DEST_DIR"/
            rm -r "$PACKAGE_NAME"
          else
            echo "$DEST_DIR 디렉토리가 존재하지 않음(처음 푼 문제), 디렉토리 전체 이동"
            mv "$PACKAGE_NAME" "LeetCode/"
          fi

      - name: Commit and Push
        run: |
          COMMIT_MSG="${{ needs.detect.outputs.commit_msg }}"
          echo "커밋 메세지 확인: $COMMIT_MSG"
        
          git config --global user.name "kimD0ngjun"
          git config --global user.email "chickentasty0112@gmail.com"

          git add .
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          git push
